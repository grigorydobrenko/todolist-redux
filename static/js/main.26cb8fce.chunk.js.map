{"version":3,"sources":["api/todolist-api.ts","app/hooks.ts","utils/error-utils.ts","features/login/auth-reducer.ts","app/app-reducer.ts","features/todolists/tasks-reducer.ts","features/todolists/todolists-reducer.ts","app/App.tsx","components/addItemForm/AddItemForm.tsx","components/editableSpan/EditableSpan.tsx","features/todolists/todolist/task/TaskComponent.tsx","features/todolists/todolist/Todolist.tsx","features/todolists/TodolistsLists.tsx","components/errorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","ResultCode","useAppDispatch","useDispatch","useAppSelector","useSelector","instance","axios","create","withCredentials","baseURL","headers","todolistAPI","todolistId","title","put","get","post","delete","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetWorkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","removeTaskAC","updateTaskAC","task","setTasksAC","tasks","todoId","changeTaskEntityStatusAC","TaskId","updateTaskTC","getState","find","t","id","res","resultCode","OK","updatedTask","item","err","isAxiosError","ROUTS","changeTodolistEntityStatusAC","AddItemForm","memo","props","addItem","useState","newTitle","setNewTitle","setError","addNewItem","trim","TextField","onChange","e","currentTarget","onKeyDown","key","label","helperText","variant","disabled","size","IconButton","color","onClick","AddBox","EditableSpan","React","callBack","editMode","setEditMode","setTitle","ActivateEditMode","onBlur","autoFocus","onDoubleClick","TaskComponent","RemoveTaskHandler","useCallback","taskID","removeTask","onChangeHandler","checked","Completed","New","changeTaskStatus","ChangeTask","changeTaskTitle","className","Checkbox","aria-label","Delete","Todolist","changeFilter","addTask","removeTodolist","changeTodolistTitle","filter","entityStatus","onAllClickHandler","onActiveClickHandler","onCompleteClickHandler","addNewTask","ChangeTodolist","allClassName","activeClassName","completedClassName","tasksForTodolist","useEffect","items","map","Button","TodolistsLists","todolists","state","auth","TodolistId","todolistID","changeTodolistFilterAC","addTodolist","todolistTitle","todolist","todos","Grid","container","style","padding","spacing","Paper","to","LOGIN","Alert","ref","elevation","CustomizedSnackbars","app","handleClose","event","reason","Stack","sx","width","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","captcha","validate","values","errors","test","onSubmit","resetForm","DEFAULT","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","FormControlLabel","control","App","AppBar","position","Toolbar","Typography","component","LinearProgress","Container","fixed","path","element","NOT_FOUND","textAlign","top","CircularProgress","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","copyState","forEach","el","newState","store","createStore","applyMiddleware","thunk","ReactDOM","createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.26cb8fce.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {LoginPayloadType} from \"../features/login/Login\";\r\nimport {UpdateTaskType} from \"../features/todolists/tasks-reducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    headers: {\r\n        'API-KEY': '1cdd9f77-c60e-4af5-b194-659e4ebd5d41',\r\n    }\r\n})\r\n\r\n//api\r\nexport const todolistAPI = {\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>(`todo-lists/`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>(`todo-lists/`, {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ResponseGetTasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: ModelType) {\r\n        return instance.put<UpdateTaskType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginPayloadType) {\r\n        return instance.post<LoginPayloadType, AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeResponseType>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n//types\r\n\r\nexport type AuthMeResponseType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type ResponseGetTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string\r\n}\r\nexport type ModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors: string\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum ResultCode {\r\n    OK = 0,\r\n    ERROR = 1,\r\n    CAPTCHA = 10\r\n}\r\n\r\n","import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux'\r\nimport {AppDispatch, RootState} from \"./store\"\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, setAppErrorACType, setAppStatusAC, setAppStatusACType} from \"../app/app-reducer\";\r\nimport {ResponseType} from \"../api/todolist-api\";\r\n\r\nexport const handleServerAppError = <D>(dispatch: Dispatch<ErrorUtilsDispatchType>, data: ResponseType<D>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('some error'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetWorkError = (dispatch: Dispatch<ErrorUtilsDispatchType>, error: {message: string})=> {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport type ErrorUtilsDispatchType = setAppErrorACType | setAppStatusACType\r\n\r\n\r\n","import {setAppErrorACType, setAppStatusAC, setAppStatusACType} from \"../../app/app-reducer\";\r\nimport {LoginPayloadType} from \"./Login\";\r\nimport {AppThunk} from \"../../app/store\";\r\nimport {authAPI, ResultCode} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetWorkError} from \"../../utils/error-utils\";\r\nimport axios, {AxiosError} from \"axios\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginPayloadType): AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authAPI.login(data)\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const logoutTC = (): AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(dispatch, res.data )\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// types\r\n\r\nexport type setIsLoggedInACType = ReturnType<typeof setIsLoggedInAC>\r\ntype ActionsType = setIsLoggedInACType | setAppStatusACType | setAppErrorACType\r\n","import {AppThunk} from \"./store\";\r\nimport {setIsLoggedInAC} from \"../features/login/auth-reducer\";\r\nimport {authAPI, ResultCode} from \"../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetWorkError} from \"../utils/error-utils\";\r\nimport axios, {AxiosError} from \"axios\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false as boolean\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.value}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (value: string | null) => ({type: 'APP/SET-ERROR', value} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) =>\r\n    ({type: 'APP/SET-INITIALIZED', isInitialized} as const)\r\n\r\n\r\nexport const initializeAppTC = (): AppThunk => async (dispatch) => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            dispatch(setIsLoggedInAC(true))\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n        }\r\n    } finally {\r\n        dispatch(setIsInitializedAC(true))\r\n    }\r\n\r\n}\r\n\r\nexport type AppActionsType = setAppStatusACType | setAppErrorACType | setIsInitializedACACType\r\nexport type setAppStatusACType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorACType = ReturnType<typeof setAppErrorAC>\r\nexport type setIsInitializedACACType = ReturnType<typeof setIsInitializedAC>","import {AddTodoListACType, RemoveTodolistAC, SetTodoListsType} from \"./todolists-reducer\"\r\nimport {ModelType, ResultCode, TaskType, todolistAPI} from \"../../api/todolist-api\"\r\nimport {AppRootStateType, AppThunk} from \"../../app/store\"\r\nimport {RequestStatusType, setAppStatusAC, setAppStatusACType} from \"../../app/app-reducer\";\r\nimport axios, {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetWorkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: TaskActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TODOS\":\r\n            let copyState = {...state}\r\n            action.todos.forEach(el =>\r\n                copyState[el.id] = []\r\n            )\r\n            return copyState\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case \"ADD-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [{...action.task, entityStatus: 'idle'}, ...state[action.todolistId]]\r\n            }\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todoId]: action.tasks.map(t => ({...t, entityStatus: 'idle'}))}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map((el) => el.id === action.taskId ? {...el, ...action.task} : el)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const newState = {...state}\r\n            delete newState[action.id]\r\n            return newState\r\n        case \"SET-TASK-ENTITY-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map((el) => el.id === action.TaskId ? {\r\n                    ...el,\r\n                    entityStatus: action.status\r\n                } : el)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', todolistId, taskId} as const)\r\nexport const addTaskAC = (todolistId: string, task: TaskType) => ({type: 'ADD-TASK', todolistId, task} as const)\r\nexport const updateTaskAC = (taskId: string, task: UpdateTaskType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    taskId,\r\n    task,\r\n    todolistId\r\n} as const)\r\n\r\nexport const setTasksAC = (tasks: TaskType[], todoId: string) => ({type: 'SET-TASKS', tasks, todoId} as const)\r\nexport const changeTaskEntityStatusAC = (todolistId: string, TaskId: string, status: RequestStatusType) => ({\r\n    type: 'SET-TASK-ENTITY-STATUS',\r\n    todolistId,\r\n    TaskId,\r\n    status\r\n} as const)\r\n\r\nexport const fetchTasksTC = (todoId: string): AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await todolistAPI.getTasks(todoId)\r\n        dispatch(setTasksAC(res.data.items, todoId))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteTaskTC = (todoId: string, taskId: string): AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(todoId, taskId, 'loading'))\r\n    try {\r\n        const res = await todolistAPI.deleteTask(todoId, taskId)\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            dispatch(removeTaskAC(taskId, todoId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n        }\r\n    }\r\n}\r\n\r\nexport const createTaskTC = (todoId: string, title: string): AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await todolistAPI.createTask(todoId, title)\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            dispatch(addTaskAC(todoId, res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTaskTC = (todoId: string, taskId: string, value: UpdateTaskType): AppThunk => async (dispatch, getState: () => AppRootStateType) => {\r\n    const task = getState().tasks[todoId].find(t => t.id === taskId)\r\n    if (task) {\r\n        const model: ModelType = {\r\n            ...task,\r\n            ...value\r\n        }\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            dispatch(changeTaskEntityStatusAC(todoId, taskId, 'loading'))\r\n            const res = await todolistAPI.updateTask(todoId, taskId, model)\r\n            if (res.data.resultCode === ResultCode.OK) {\r\n                const updatedTask = res.data.data.item\r\n                dispatch(updateTaskAC(taskId, updatedTask, todoId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        } catch (e) {\r\n            const err = e as Error | AxiosError\r\n            if (axios.isAxiosError(err)) {\r\n                handleServerNetWorkError(dispatch, err)\r\n            }\r\n        } finally {\r\n            dispatch(changeTaskEntityStatusAC(todoId, taskId, 'idle'))\r\n        }\r\n\r\n    }\r\n}\r\n\r\n//types\r\nexport type TaskActionsType =\r\n    removeTaskACType\r\n    | addTaskACType\r\n    | changeTaskStatusACType\r\n    | AddTodoListACType\r\n    | RemoveTodolistAC\r\n    | SetTodoListsType\r\n    | setTasksACType\r\n    | setAppStatusACType\r\n    | changeTaskEntityStatusACType\r\n\r\ntype removeTaskACType = ReturnType<typeof removeTaskAC>\r\ntype addTaskACType = ReturnType<typeof addTaskAC>\r\ntype changeTaskStatusACType = ReturnType<typeof updateTaskAC>\r\ntype setTasksACType = ReturnType<typeof setTasksAC>\r\ntype changeTaskEntityStatusACType = ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\nexport type UpdateTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [id: string]: TaskDomainType[]\r\n}\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\n","import {ResultCode, todolistAPI, TodolistType} from \"../../api/todolist-api\"\r\nimport {AppThunk} from \"../../app/store\"\r\nimport {RequestStatusType, setAppErrorACType, setAppStatusAC, setAppStatusACType} from \"../../app/app-reducer\";\r\nimport axios, {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetWorkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todolistsReducer = (state = initialState, action: TodolistActionsType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(t => t.id !== action.id)\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(t => t.id === action.id ? {...t, title: action.newTitle} : t)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(t => t.id === action.id ? {...t, filter: action.filter} : t)\r\n        case \"SET-TODOS\":\r\n            return action.todos.map(t => ({...t, filter: \"active\", entityStatus: 'idle'}))\r\n        case \"SET-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(t => t.id === action.id ? {...t, entityStatus: action.status} : t)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const changeTodolistTitleAC = (id: string, newTitle: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    newTitle\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todos: TodolistType[]) => ({type: 'SET-TODOS', todos} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'SET-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    status\r\n} as const)\r\n\r\nexport const getTodoTC = (): AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await todolistAPI.getTodolists()\r\n        dispatch(setTodolistsAC(res.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n            dispatch(setAppStatusAC('failed'))\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteTodoTC = (todoId: string): AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        dispatch(changeTodolistEntityStatusAC(todoId, 'loading'))\r\n        await todolistAPI.deleteTodolist(todoId)\r\n        dispatch(removeTodolistAC(todoId))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (e) {\r\n        dispatch(changeTodolistEntityStatusAC(todoId, 'idle'))\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const createTodoTC = (title: string): AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await todolistAPI.createTodolist(title)\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const changeTodoTitleTC = (todoId: string, title: string): AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todoId, 'loading'))\r\n    try {\r\n        const res = await todolistAPI.updateTodolist(todoId, title)\r\n        if (res.data.resultCode === ResultCode.OK) {\r\n            dispatch(changeTodolistTitleAC(todoId, title))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            handleServerNetWorkError(dispatch, err)\r\n        }\r\n    } finally {\r\n        dispatch(changeTodolistEntityStatusAC(todoId, 'idle'))\r\n    }\r\n\r\n}\r\n\r\n//types\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListDomainType = TodolistType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type TodolistActionsType =\r\n    AddTodoListACType\r\n    | RemoveTodolistAC\r\n    | ChangeTodolistTitleACType\r\n    | ChangeTodolistFilterAC\r\n    | SetTodoListsType\r\n    | setAppStatusACType\r\n    | setAppErrorACType\r\n    | ChangeTodolistEntityStatusType\r\n\r\n\r\nexport type AddTodoListACType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistAC = ReturnType<typeof removeTodolistAC>\r\nexport type ChangeTodolistTitleACType = ReturnType<typeof changeTodolistTitleAC>\r\nexport type ChangeTodolistFilterAC = ReturnType<typeof changeTodolistFilterAC>\r\nexport type SetTodoListsType = ReturnType<typeof setTodolistsAC>\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@mui/material\"\r\nimport {TodolistsLists} from \"../features/todolists/TodolistsLists\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {CustomizedSnackbars} from \"../components/errorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {useAppDispatch, useAppSelector} from \"./hooks\";\r\nimport {logoutTC} from \"../features/login/auth-reducer\";\r\n\r\nexport enum ROUTS {\r\n    DEFAULT = '/',\r\n    LOGIN = '/login',\r\n    NOT_FOUND = '/404',\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const dispatch = useAppDispatch()\r\n    const isInitialized = useAppSelector(state => state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const logOut = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant=\"dense\" className={'toolBar'}>\r\n                    <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\r\n                       Todolist\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color='inherit'  onClick={logOut}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={ROUTS.DEFAULT} element={<TodolistsLists/>}></Route>\r\n                    <Route path={ROUTS.LOGIN} element={<Login/>}></Route>\r\n                    <Route path={ROUTS.NOT_FOUND}\r\n                           element={<h1 style={{textAlign: 'center'}}>404: PAGE NOT FOUND</h1>}></Route>\r\n                    <Route path='*' element={<Navigate to={ROUTS.NOT_FOUND}/>}></Route>\r\n                </Routes>\r\n            </Container>\r\n            <CustomizedSnackbars/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default App;\r\n","import React, {ChangeEvent, KeyboardEvent, memo, useState} from 'react';\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nconst AddItemForm = memo((props: AddItemFormPropsType) => {\r\n    const {addItem} = props\r\n\r\n    const [newTitle, setNewTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addNewItem()\r\n        }\r\n        if (error) {\r\n            setError(false)\r\n        }\r\n    }\r\n\r\n\r\n    const addItemHandler = () => {\r\n        addNewItem()\r\n    }\r\n\r\n    const addNewItem = () => {\r\n        const trimmedTitle = newTitle.trim()\r\n\r\n        if (trimmedTitle) {\r\n            addItem(newTitle)\r\n            setNewTitle('')\r\n            setError(false)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                onChange={onChangeHandler}\r\n                value={newTitle}\r\n                onKeyDown={onKeyDownHandler}\r\n                error={!!error}\r\n                label='Title'\r\n                helperText={error && 'Title is required'}\r\n                variant=\"outlined\"\r\n                disabled={props.disabled}\r\n                size=\"small\"/>\r\n            <IconButton color=\"primary\" onClick={addItemHandler} disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    callBack: (newTitle: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const {value, callBack, disabled} = props\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(value)\r\n\r\n    const ActivateEditMode = () => {\r\n        setEditMode(!editMode)\r\n        callBack(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField\r\n                onChange={onChangeHandler}\r\n                value={title}\r\n                onBlur={ActivateEditMode}\r\n                autoFocus\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n            />\r\n            :\r\n            disabled ? <span>{value}</span> : <span onDoubleClick={ActivateEditMode}>{value}</span>\r\n    );\r\n})\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from \"@mui/material\"\r\nimport EditableSpan from \"../../../../components/editableSpan/EditableSpan\"\r\nimport {Delete} from \"@mui/icons-material\"\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\"\r\n\r\n\r\ntype TaskPropsType = {\r\n    changeTaskStatus: (todolistID: string, taskId: string, status: TaskStatuses) => void\r\n    removeTask: (todolistId: string, taskID: string) => void\r\n    changeTaskTitle: (TodolistId: string, taskId: string, newTitle: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n    disabled: boolean\r\n\r\n}\r\nconst TaskComponent = React.memo((props: TaskPropsType) => {\r\n    const RemoveTaskHandler = useCallback((taskID: string) => {\r\n        props.removeTask(props.todolistId, taskID)\r\n    }, [props.removeTask, props.task.id])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        const status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        props.changeTaskStatus(props.todolistId, props.task.id, status)\r\n    }, [props.todolistId, props.task.id])\r\n    const ChangeTask = useCallback((taskId: string, newTitle: string) => {\r\n        props.changeTaskTitle(props.todolistId, taskId, newTitle)\r\n    }, [props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox onChange={onChangeHandler} checked={props.task.status === TaskStatuses.Completed} color='primary'\r\n                  disabled={props.disabled}/>\r\n        <EditableSpan value={props.task.title} callBack={(newTitle) => ChangeTask(props.task.id, newTitle)}\r\n                      disabled={props.disabled}/>\r\n        <IconButton aria-label=\"delete\" size=\"small\" onClick={() => RemoveTaskHandler(props.task.id)}\r\n                    disabled={props.disabled}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n\r\nexport default TaskComponent;","import React, {useCallback, useEffect} from \"react\"\r\nimport AddItemForm from \"../../../components/addItemForm/AddItemForm\"\r\nimport EditableSpan from \"../../../components/editableSpan/EditableSpan\"\r\nimport {Button, IconButton} from \"@mui/material\"\r\nimport {Delete} from \"@mui/icons-material\"\r\nimport TaskComponent from \"./task/TaskComponent\"\r\nimport {TaskStatuses} from \"../../../api/todolist-api\"\r\nimport {FilterType} from \"../todolists-reducer\";\r\nimport {fetchTasksTC, TaskDomainType} from \"../tasks-reducer\";\r\nimport {useAppDispatch} from \"../../../app/hooks\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: TaskDomainType[]\r\n    removeTask: (todolistId: string, taskID: string) => void\r\n    changeFilter: (todolistID: string, filter: FilterType) => void\r\n    addTask: (todolistID: string, newTitle: string) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, status: TaskStatuses) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (TodolistId: string, taskId: string, newTitle: string) => void\r\n    changeTodolistTitle: (TodolistId: string, newTitle: string) => void\r\n    filter: FilterType,\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\nexport const Todolist: React.FC<PropsType> = React.memo((\r\n    {\r\n        id,\r\n        title,\r\n        tasks,\r\n        removeTask,\r\n        changeFilter,\r\n        addTask,\r\n        changeTaskStatus,\r\n        removeTodolist,\r\n        changeTaskTitle,\r\n        changeTodolistTitle,\r\n        filter,\r\n        entityStatus\r\n    }\r\n) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter(id, 'all')\r\n    }, [changeFilter, id])\r\n\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter(id, 'active')\r\n    }, [changeFilter, id])\r\n\r\n    const onCompleteClickHandler = useCallback(() => {\r\n        changeFilter(id, 'completed')\r\n    }, [changeFilter, id])\r\n\r\n\r\n    const addNewTask = useCallback((title: string) => {\r\n        addTask(id, title)\r\n    }, [addTask, id])\r\n\r\n\r\n    const onClickTitleHandler = () => {\r\n        removeTodolist(id)\r\n    }\r\n\r\n    const ChangeTodolist = useCallback((newTitle: string) => {\r\n        changeTodolistTitle(id, newTitle)\r\n    }, [changeTodolistTitle, id])\r\n\r\n    const allClassName = filter === 'all' ? \"outlined\" : \"text\"\r\n    const activeClassName = filter === 'active' ? \"outlined\" : \"text\"\r\n    const completedClassName = filter === 'completed' ? \"outlined\" : \"text\"\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(id))\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan value={title} callBack={ChangeTodolist} disabled={entityStatus === 'loading'}/>\r\n                    <IconButton aria-label=\"delete\" size=\"small\" onClick={onClickTitleHandler} disabled={entityStatus === 'loading'}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addNewTask} disabled={entityStatus === 'loading'}/>\r\n\r\n                {!tasksForTodolist.length && <span>No tasks</span>}\r\n                { tasksForTodolist.map(t =>\r\n                    <TaskComponent\r\n                        key={t.id}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTask={removeTask}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        task={t}\r\n                        todolistId={id}\r\n                        disabled={t.entityStatus === 'loading' || entityStatus === 'loading'}\r\n                    />\r\n                )}\r\n                <div>\r\n                    <Button onClick={onAllClickHandler} variant={allClassName} color='warning'>All</Button>\r\n                    <Button onClick={onActiveClickHandler} variant={activeClassName} color='error'>Active</Button>\r\n                    <Button onClick={onCompleteClickHandler} variant={completedClassName}\r\n                            color='secondary'>Completed</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\"\r\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\"\r\nimport {createTaskTC, deleteTaskTC, updateTaskTC} from \"./tasks-reducer\"\r\nimport {\r\n    changeTodolistFilterAC,\r\n    changeTodoTitleTC,\r\n    createTodoTC,\r\n    deleteTodoTC,\r\n    FilterType, getTodoTC\r\n} from \"./todolists-reducer\"\r\nimport {TaskStatuses} from \"../../api/todolist-api\"\r\nimport {Grid, Paper} from \"@mui/material\"\r\nimport AddItemForm from \"../../components/addItemForm/AddItemForm\";\r\nimport {Todolist} from \"./todolist/Todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {ROUTS} from \"../../app/App\";\r\n\r\nexport const TodolistsLists: React.FC = () => {\r\n    let todolists = useAppSelector(state => state.todolists)\r\n    let tasks = useAppSelector(state => state.tasks)\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n\r\n    const removeTask = useCallback((TodolistId: string, taskID: string) => {\r\n        dispatch(deleteTaskTC(TodolistId, taskID))\r\n    }, [dispatch])\r\n\r\n\r\n    const changeFilter = useCallback((todolistID: string, filter: FilterType) => {\r\n        dispatch(changeTodolistFilterAC(todolistID, filter))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((todolistID: string, newTitle: string) => {\r\n        dispatch(createTaskTC(todolistID, newTitle))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((todolistID: string, taskId: string, status: TaskStatuses) => {\r\n        dispatch(updateTaskTC(todolistID, taskId, {status}))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(deleteTodoTC(todolistId))\r\n    }, [dispatch])\r\n\r\n\r\n    const addTodolist = useCallback((todolistTitle: string) => {\r\n        dispatch(createTodoTC(todolistTitle))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((TodolistId: string, taskId: string, newTitle: string) => {\r\n        dispatch(updateTaskTC(TodolistId, taskId, {title: newTitle}))\r\n    }, [dispatch])\r\n\r\n\r\n    const changeTodolistTitle = useCallback((TodolistId: string, newTitle: string) => {\r\n        dispatch(changeTodoTitleTC(TodolistId, newTitle))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        \r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(getTodoTC())\r\n    }, [])\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={ROUTS.LOGIN}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {todolists.map(t => {\r\n                return <Grid item key={t.id}>\r\n                    <Paper style={{padding: '10px'}}>\r\n                        <Todolist\r\n                            key={t.id}\r\n                            id={t.id}\r\n                            entityStatus={t.entityStatus}\r\n                            title={t.title}\r\n                            tasks={tasks[t.id]}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            filter={t.filter}\r\n                            removeTodolist={removeTodolist}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const CustomizedSnackbars = () => {\r\n    const error = useAppSelector<string | null>(state => state.app.error)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{ width: '100%' }}>\r\n            <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {ROUTS} from \"../../app/App\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nexport type LoginPayloadType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: ''\r\n        },\r\n        validate: (values: LoginPayloadType) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Too short password'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values: LoginPayloadType) => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    \r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={ROUTS.DEFAULT}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            onBlur={formik.handleBlur}/>\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}/>\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'password'}\r\n                                          control={<Checkbox {...formik.getFieldProps('rememberMe')}\r\n                                                             checked={formik.values.rememberMe}\r\n                                          />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {TaskActionsType, tasksReducer} from '../features/todolists/tasks-reducer'\r\nimport {TodolistActionsType, todolistsReducer} from '../features/todolists/todolists-reducer'\r\nimport {AnyAction, applyMiddleware, combineReducers, legacy_createStore as createStore} from 'redux'\r\nimport thunk, {ThunkAction, ThunkDispatch} from \"redux-thunk\"\r\nimport {appReducer, setIsInitializedACACType} from \"./app-reducer\";\r\nimport {authReducer, setIsLoggedInACType} from \"../features/login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n// type AppActionsType = TodosActionsType\r\n\r\n\r\ntype AppEntitiesActionsType = TaskActionsType | TodolistActionsType | setIsLoggedInACType | setIsInitializedACACType\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = ThunkDispatch<RootState, unknown, AnyAction>\r\n// export type AppDispatch = ThunkDispatch<RootState, unknown, AppActionsType>\r\n// export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, AppActionsType>\r\n\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, AppEntitiesActionsType>\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport './index.css'\r\nimport App from './app/App'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)\r\n\r\nroot.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>\r\n   )\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}